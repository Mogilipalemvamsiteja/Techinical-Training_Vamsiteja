#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAXCITIES 10

int factorial(int n) {
    if (n <= 1)
        return 1;
    return n * factorial(n - 1);
}

int distance(int x1, int y1, int x2, int y2) {
    return abs(x2 - x1) + abs(y2 - y1);
}

int totalDistance(int cities[MAXCITIES][2], int permutation[], int n) {
    int totalDist = 0;
    for (int i = 0; i < n - 1; i++) {
        totalDist += distance(cities[permutation[i]][0], cities[permutation[i]][1], cities[permutation[i+1]][0], cities[permutation[i+1]][1]);
    }
    totalDist += distance(cities[permutation[n-1]][0], cities[permutation[n-1]][1], cities[permutation[0]][0], cities[permutation[0]][1]);
    return totalDist;
}

int next_permutation(int permutation[], int n) {
    int i = n - 2;
    while (i >= 0 && permutation[i] >= permutation[i + 1])
        i--;
    if (i < 0)
        return 0; 
    int j = n - 1;
    while (permutation[j] <= permutation[i])
        j--;
    int temp = permutation[i];
    permutation[i] = permutation[j];
    permutation[j] = temp;
    int left = i + 1;
    int right = n - 1;
    while (left < right) {
        temp = permutation[left];
        permutation[left] = permutation[right];
        permutation[right] = temp;
        left++;
        right--;
    }
    return 1;
}

void tspNaive(int cities[MAXCITIES][2], int n) {
    int minDist = INT_MAX;
    int optimalTour[MAXCITIES];
    int permutation[MAXCITIES];

    for (int i = 0; i < n; i++) {
        permutation[i] = i;
    }
    
    int totalPermutations = factorial(n);
    for (int i = 0; i < totalPermutations; i++) {
        int dist = totalDistance(cities, permutation, n);
        if (dist < minDist) {
            minDist = dist;
            for (int j = 0; j < n; j++) {
                optimalTour[j] = permutation[j];
            }
        }
        next_permutation(permutation, n);
    }
    
    printf("Optimal Tour: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", optimalTour[i]);
    }
    printf("\nTotal Distance: %d\n", minDist);
}

int main() {
    int cities[MAXCITIES][2]; // Max 10 cities
    int n;
    
    printf("Enter the number of cities (max %d): ", MAXCITIES);
    scanf("%d", &n);
    
    printf("Enter the coordinates of the cities (x y):\n");
    for (int i = 0; i < n; i++) {
        printf("City %d: ", i);
        scanf("%d %d", &cities[i][0], &cities[i][1]);
    }
    
    tspNaive(cities, n);
    
    return 0;
}

